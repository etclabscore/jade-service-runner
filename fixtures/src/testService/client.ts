
// Code generated by @open-rpc/client-generator DO NOT EDIT.
import { RequestManager, WebSocketTransport, HTTPTransport, Client, JSONRPCError } from "@open-rpc/client-js";
import _ from "lodash";
import { OpenRPC, MethodObject, ContentDescriptorObject } from "@open-rpc/meta-schema";
import { MethodCallValidator, MethodNotFoundError } from "@open-rpc/schema-utils-js";

export type IntegerTfIB8Svh = number;
export type Addition = (a?: IntegerTfIB8Svh, b?: IntegerTfIB8Svh) => Promise<IntegerTfIB8Svh>;
export type Subtraction = (a?: IntegerTfIB8Svh, b?: IntegerTfIB8Svh) => Promise<IntegerTfIB8Svh>;

export interface Options {
  transport: {
    type: "websocket" | "http" | "https";
    host: string;
    port: number;
    path?: string;
  };
}

export class SimpleMath {
  public static openrpcDocument: OpenRPC = {"openrpc": "1.0.0-rc1", "info": {"title": "Simple Math", "description": "A simple math example", "version": "1.0.0"}, "servers": [{"name": "my simple math server", "summary": "simple math server summary", "description": "simple math server description", "url": "http://${username}.simple-math.example.org:${port}/${basePath}/", "variables": {"username": {"default": "demo", "description": "this is applied to the url as the subdomain"}, "port": {"default": "443", "enum": ["8545", "443"]}, "basePath": {"default": "jsonrpc"}}}], "methods": [{"name": "addition", "params": [{"name": "a", "schema": {"type": "integer"}}, {"name": "b", "schema": {"type": "integer"}}], "result": {"name": "c", "schema": {"type": "integer"}}, "examples": [{"name": "simpleMathAdditionTwo", "params": [{"name": "two", "summary": "its a sample two", "description": "Im not sure how else to say two", "value": 2}, {"name": "two", "summary": "its a sample two", "description": "Im not sure how else to say two", "value": 2}], "result": {"name": "four", "summary": "its a sample four", "description": "Im not sure how else to say four", "value": 4}}, {"name": "simpleMathAdditionFour", "params": [{"name": "four", "summary": "its a sample four", "description": "Im not sure how else to say four", "value": 4}, {"name": "four", "summary": "its a sample four", "description": "Im not sure how else to say four", "value": 4}], "result": {"name": "eight", "summary": "its a sample eight", "description": "Im not sure how else to say eight", "value": 8}}], "links": [{"name": "subtractionLink", "description": "use the parameters from addition for subtraction", "method": "subtraction", "params": {"a": "$params.a", "b": "$params.b"}}]}, {"name": "subtraction", "params": [{"name": "a", "schema": {"type": "integer"}}, {"name": "b", "schema": {"type": "integer"}}], "result": {"name": "c", "schema": {"type": "integer"}}, "examples": [{"name": "examplesSubtractFourTwo", "params": [{"name": "four", "summary": "its a sample four", "description": "Im not sure how else to say four", "value": 4}, {"name": "two", "summary": "its a sample two", "description": "Im not sure how else to say two", "value": 2}], "result": {"name": "two", "summary": "its a sample two", "description": "Im not sure how else to say two", "value": 2}}, {"name": "examplesSubtractEightFour", "params": [{"name": "eight", "summary": "its a sample eight", "description": "Im not sure how else to say eight", "value": 8}, {"name": "four", "summary": "its a sample four", "description": "Im not sure how else to say four", "value": 4}], "result": {"name": "four", "summary": "its a sample four", "description": "Im not sure how else to say four", "value": 4}}], "links": [{"name": "additionLink", "description": "use the parameters from subtraction for addition", "method": "addition", "params": {"a": "$params.a", "b": "$params.b"}}]}], "components": {"contentDescriptors": {"c": {"name": "c", "schema": {"type": "integer"}}}, "schemas": {"Integer": {"type": "integer"}}, "examples": {"integerTwo": {"name": "two", "summary": "its a sample two", "description": "Im not sure how else to say two", "value": 2}, "integerFour": {"name": "four", "summary": "its a sample four", "description": "Im not sure how else to say four", "value": 4}, "integerEight": {"name": "eight", "summary": "its a sample eight", "description": "Im not sure how else to say eight", "value": 8}}}} ;
  public rpc: Client;
  public transport: HTTPTransport | WebSocketTransport;
  private validator: MethodCallValidator;
  private timeout: number | undefined;

  constructor(options: Options) {

    if (options.transport === undefined || options.transport.type === undefined) {
      throw new Error("Invalid constructor params");
    }
    const {type, host, port} = options.transport;
    let path = options.transport.path || "";
    if (path && path[0] !== "/") {
        path = "/" + path;
    }
    switch (type) {
      case "http":
      case "https":
        this.transport = new HTTPTransport(type + "://" + host + ":" + port + path);
        break;
      case "websocket":
        this.transport = new WebSocketTransport("ws://" + host + ":" + port + path);
        break;
      default:
        throw new Error("unsupported transport");
        break;
    }
    this.rpc = new Client(new RequestManager([this.transport]));
    this.validator = new MethodCallValidator(SimpleMath.openrpcDocument);
  }
  /**
   * Adds a JSONRPC notification handler to handle receiving notifications.
   * @example
   * myClient.onNotification((data)=>console.log(data));
   */
  public onNotification(callback: (data: any) => void) {
    this.rpc.onNotification(callback);
  }

  /**
   * Adds an optional JSONRPCError handler to handle receiving errors that cannot be resolved to a specific request
   * @example
   * myClient.onError((err: JSONRPCError)=>console.log(err.message));
   */
  public onError(callback: (data: JSONRPCError) => void) {
     this.rpc.onError(callback);
  }

  /**
   * Sets a default timeout in ms for all requests excluding notifications.
   * @example
   * // 20s timeout
   * myClient.setDefaultTimeout(20000);
   * // Removes timeout from request
   * myClient.setDefaultTimeout(undefined);
   */
   public setDefaultTimeout(ms?: number) {
    this.timeout = ms;
  }

  /**
   * Initiates [[SimpleMath.startBatch]] in order to build a batch call.
   *
   * Subsequent calls to [[SimpleMath.request]] will be added to the batch.
   * Once [[SimpleMath.stopBatch]] is called, the promises for the [[SimpleMath.request]]
   * will then be resolved.  If there is already a batch in progress this method is a noop.
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public startBatch(): void {
    return this.rpc.startBatch();
  }

  /**
   * Initiates [[Client.stopBatch]] in order to finalize and send the batch to the underlying transport.
   *
   * stopBatch will send the [[SimpleMath]] calls made since the last [[SimpleMath.startBatch]] call. For
   * that reason, [[SimpleMath.startBatch]] MUST be called before [[SimpleMath.stopBatch]].
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public stopBatch(): void {
    return this.rpc.stopBatch();
  }

  /**
   *
   */
  // tslint:disable-next-line:max-line-length
  public addition: Addition = (...params) => {
    return this.request("addition", params);
  }

  /**
   *
   */
  // tslint:disable-next-line:max-line-length
  public subtraction: Subtraction = (...params) => {
    return this.request("subtraction", params);
  }

  private request(methodName: string, params: any[]): Promise<any> {
    const methodObject = _.find(SimpleMath.openrpcDocument.methods, ({name}) => name === methodName) as MethodObject;
    const notification = methodObject.result ? false : true;
    const openRpcMethodValidationErrors = this.validator.validate(methodName, params);
    if ( openRpcMethodValidationErrors instanceof MethodNotFoundError || openRpcMethodValidationErrors.length > 0) {
      return Promise.reject(openRpcMethodValidationErrors);
    }

    let rpcParams;
    if (methodObject.paramStructure && methodObject.paramStructure === "by-name") {
      rpcParams = _.zipObject(params, _.map(methodObject.params, "name"));
    } else {
      rpcParams = params;
    }
    if (notification) {
      return this.rpc.notify(methodName, rpcParams);
    }
    return this.rpc.request(methodName, rpcParams, this.timeout);
  }

}
export default SimpleMath;
