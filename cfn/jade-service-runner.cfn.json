{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "ApplicationName": {
      "Description": "The name of the Elastic Beanstalk Application",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "The Key Pair to launch instances with",
      "Type": "String"
    },
    "DomainName": {
      "Description": "The domain name that you wish to use for this SSL certificate",
      "Type": "String"
    },
    "HostedZoneId": {
      "Description": "The hosted zone ID of the route53 record set for the above DomainName parameter",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "The Key Pair to launch instances with",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": ["t2.micro", "t2.small", "t2.medium", "t2.large"]
    },
    "EnvironmentName": {
      "Type": "String",
      "Default": "Development"
    },
    "VolumeSize": {
      "Description": "Size of the elastic block store that you want for each ec2 instance",
      "Type": "number",
      "Default": 50
    }
  },
  "Mappings" : {
    "HostedZoneIdByRegion" : {
      "us-east-1": { "id": "Z35SXDOTRQ7X7K" },
      "us-east-2": { "id": "Z3AADJGX6KTTL2" },
      "us-west-1": { "id": "Z368ELLRRE2KJ0" },
      "us-west-2": { "id": "Z1H1FL5HABSF5" },
      "ap-east-1": { "id": "Z3DQVH9N71FHZ0" },
      "ap-south-1": { "id": "ZP97RAFLXTNZK" },
      "ap-northeast-3": { "id": "Z5LXEXXYW11ES" },
      "ap-northeast-2": { "id": "ZWKZPGTI48KDX" },
      "ap-southeast-1": { "id": "Z1LMS91P8CMLE5" },
      "ap-southeast-2": { "id": "Z1GM3OXH4ZPM65" },
      "ap-northeast-1": { "id": "Z14GRHDCWA56QT" },
      "ca-central-1": { "id": "ZQSVJUPU6J1EY" },
      "cn-north-1": { "id": "Z3BX2TMKNYI13Y" },
      "cn-northwest-1": { "id": "Z3BX2TMKNYI13Y" },
      "eu-central-1": { "id": "Z215JYRZR1TBD5" },
      "eu-west-1": { "id": "Z32O12XQLNTSW2" },
      "eu-west-2": { "id": "ZHURV8PSTC4K8" },
      "eu-west-3": { "id": "Z3Q77PNBQS71R4" },
      "eu-north-1": { "id": "Z23TAZ6LKFMNIO" },
      "me-south-1": { "id": "ZS929ML54UICD" },
      "sa-east-1": { "id": "Z2P70J7HTTTPLU" }
    }
  },
  "Resources": {
    "ACMApproverRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ACMCFNLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "acm:*",
                    "route53:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ACMApproverFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import json,datetime,boto3,traceback,time\nfrom botocore.vendored import requests\nfrom datetime import date, datetime\ndef json_serial(obj):\n    if isinstance(obj, (datetime, date)):\n        return obj.isoformat()\n    raise TypeError (\"Type %s not serializable\" % type(obj))\ndef cfn_response(url, body):\n    headers = {'content-type' : '','content-length' : str(len(body))}\n    response = requests.put(url,data=body,headers=headers)\ndef acm_certificate(event, context):\n    if event['RequestType'] in ['Create','Update']:\n        cfn_response(event['ResponseURL'], _create_acm_certificate(event))\n    else:\n        cfn_response(event['ResponseURL'], _delete_acm_certificate(event))\ndef _create_acm_certificate(event):\n    acm = boto3.client('acm')\n    r53 = boto3.client('route53')\n    ret = {}\n    ret['StackId'] = event['StackId']\n    ret['RequestId'] = event['RequestId']\n    ret['LogicalResourceId'] = event['LogicalResourceId']\n    rp = event['ResourceProperties']\n    try:\n        dn = rp['DomainName']\n        clist = acm.list_certificates(CertificateStatuses=['PENDING_VALIDATION','ISSUED'])['CertificateSummaryList']\n        cert_arn = None\n        exists = ([c for c in clist if c['DomainName']== dn] or [None])[0]\n        if exists != None:\n            print(\"Cert exists\")\n            cert_arn = exists['CertificateArn']\n        else:\n            print(\"Cert does not exist. Creating one.\")\n            rcr = acm.request_certificate(\n                DomainName=dn,\n                ValidationMethod='DNS',\n                IdempotencyToken=event['LogicalResourceId']\n            )\n            cert_arn = rcr['CertificateArn']\n            time.sleep(10)\n            dcr = acm.describe_certificate(\n                CertificateArn=cert_arn\n            )\n            r53_c = []\n            rr = dcr['Certificate']['DomainValidationOptions'][0]['ResourceRecord']\n            bd = {'Comment':'Auth','Changes':[{'Action':'UPSERT','ResourceRecordSet':{'Name':rr['Name'],'Type':rr['Type'],'TTL': 3600,'ResourceRecords':[{'Value':rr['Value']}]}}]}\n            r53.change_resource_record_sets(\n                HostedZoneId=rp['HostedZoneId'],\n                ChangeBatch=bd\n            )\n            allGood = False\n            while not allGood:\n                time.sleep(30)\n                print(\"Checking if domain is validated.\")\n                cc = acm.describe_certificate(\n                    CertificateArn=cert_arn\n                )\n                st = cc['Certificate']['Status']\n                print(\"Curr Status %s\" % st)\n                if st == 'ISSUED':\n                    allGood = True\n            bd['Changes'][0]['Action'] = \"DELETE\"\n            r53.change_resource_record_sets(\n                HostedZoneId=rp['HostedZoneId'],\n                ChangeBatch=bd\n            )\n\n        ret['PhysicalResourceId'] = cert_arn\n        ret['Data'] = {}\n        ret['Data']['CertificateArn'] = cert_arn\n        ret['Status'] = 'SUCCESS'\n    except:\n        traceback.print_exc()\n        ret['Status'] = 'FAILED'\n        ret['Reason'] = 'Good question'\n    finally:\n        cfn_response(event['ResponseURL'], json.dumps(ret))\n        return json.dumps(ret)\n\ndef _delete_acm_certificate(event):\n    acm = boto3.client('acm')\n    ret = {}\n    ret['StackId'] = event['StackId']\n    ret['RequestId'] = event['RequestId']\n    ret['LogicalResourceId'] = event['LogicalResourceId']\n    ret['PhysicalResourceId'] = event['PhysicalResourceId']\n    try:\n        response = acm.delete_certificate(\n            CertificateArn=event['PhysicalResourceId']\n        )\n        print(\"got response %s\" % json.dumps(response, default=json_serial))\n        ret['Status'] = 'SUCCESS'\n    except:\n        traceback.print_exc()\n        ret['Status'] = 'SUCCESS'\n        ret['Reason'] = 'Good question'\n    finally:\n        cfn_response(event['ResponseURL'], json.dumps(ret))\n        return json.dumps(ret)\n"
        },
        "Description": "Cloudformation Custom Resource for ACM certs using Route53 approval",
        "Handler": "index.acm_certificate",
        "MemorySize": 256,
        "Runtime": "python2.7",
        "Timeout": 600,
        "Role": {
          "Fn::GetAtt": "ACMApproverRole.Arn"
        }
      }
    },
    "AutoCertificate": {
      "Type": "Custom::ACMCertificate",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": "ACMApproverFunction.Arn"
        },
        "DomainName": { "Ref": "DomainName" },
        "HostedZoneId": { "Ref": "HostedZoneId" }
      }
    },
    "EBConfigurationTemplate": {
      "Type" : "AWS::ElasticBeanstalk::ConfigurationTemplate",
      "Properties" : {
        "ApplicationName" : { "Ref": "ApplicationName" },
        "SolutionStackName": "64bit Amazon Linux 2018.03 v4.10.1 running Node.js",
        "OptionSettings": [
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "EC2KeyName",
            "Value": {
              "Ref" : "KeyPairName"
            }
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "IamInstanceProfile",
            "Value": {
              "Ref": "EbAppInstanceProfile"
            }
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "InstanceType",
            "Value": {
              "Ref": "InstanceType"
            }
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "RootVolumeType",
            "Value": "gp2"
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "RootVolumeSize",
            "Value": {
              "Ref": "VolumeSize"
            }
          }
          {
            "Namespace": "aws:elb:loadbalancer",
            "OptionName": "SSLCertificateId",
            "Value": { "Ref": "AutoCertificate" }
          },
          {
            "Namespace": "aws:elb:listener:443",
            "OptionName": "InstancePort",
            "Value": 8081
          },
          {
            "Namespace": "aws:elb:listener:443",
            "OptionName": "InstanceProtocol",
            "Value": "HTTP"
          },
          {
            "Namespace": "aws:elb:listener:443",
            "OptionName": "ListenerProtocol",
            "Value": "HTTPS"
          },
          {
            "Namespace": "aws:elb:listener:443",
            "OptionName": "SSLCertificateId",
            "Value": { "Ref": "AutoCertificate" }
          },
          {
            "Namespace": "aws:elb:listener:80",
            "OptionName": "InstancePort",
            "Value": 8081
          },
          {
            "Namespace": "aws:elb:listener:80",
            "OptionName": "InstanceProtocol",
            "Value": "HTTP"
          },
          {
            "Namespace": "aws:elb:listener:80",
            "OptionName": "ListenerProtocol",
            "Value": "HTTP"
          },
          {
            "Namespace": "aws:elasticbeanstalk:container:nodejs",
            "OptionName": "NodeCommand",
            "Value": "npm run startaws"
          },
          {
            "Namespace": "aws:elasticbeanstalk:container:nodejs",
            "OptionName": "ProxyServer",
            "Value": "none"
          },
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "NPM_USE_PRODUCTION",
            "Value": false
          },
          {
            "Namespace": "aws:elasticbeanstalk:environment:process:default",
            "OptionName": "Port",
            "Value": 8081
          },
          {
            "Namespace": "aws:elasticbeanstalk:environment:process:default",
            "OptionName": "Protocol",
            "Value": "HTTP"
          }
        ]
      }
    },
    "EBEnvironment": {
      "Type": "AWS::ElasticBeanstalk::Environment",
      "Properties": {
        "EnvironmentName" : { "Fn::Join": ["-", [ { "Ref": "ApplicationName" }, { "Ref": "EnvironmentName" } ]] },
        "Description": { "Fn::Join": [ " ", [ "The", { "Ref": "EnvironmentName" }, "Environment" ] ] },
        "ApplicationName" : { "Ref": "ApplicationName" },
        "TemplateName": { "Ref": "EBConfigurationTemplate" },
        "Tier": {
          "Name": "WebServer",
          "Type": "Standard"
        }
      }
    },
    "EbAppRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["ec2.amazonaws.com"] },
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      }
    },
    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": { "Fn::Join": [ "-", ["EbApp", { "Ref": "ApplicationName" }, { "Ref": "EnvironmentName" }] ]},
        "PolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
          }]
        },
        "Roles": [{
          "Ref": "EbAppRole"
        }]
      }
    },
    "EbAppInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "EbAppRole"
        }]
      }
    },
    "Route53Alias": {
      "Type" : "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": {"Fn::GetAtt": ["EBEnvironment", "EndpointURL"] },
          "HostedZoneId": { "Fn::FindInMap": ["HostedZoneIdByRegion", { "Ref": "AWS::Region" }, "id" ] }
        },
        "HostedZoneId": { "Ref": "HostedZoneId" },
        "Name": { "Ref": "DomainName" },
        "Type": "A"
      }
    }
  }
}
