{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "DomainName": {
      "Description": "The domain name that you wish to use for this SSL certificate",
      "Type": "String"
    },
    "HostedZoneId": {
      "Description": "The hosted zone ID of the route53 record set for the above DomainName parameter",
      "Type": "String"
    }
  },
  "Resources": {
    "ACMApproverRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ACMCFNLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "acm:*",
                    "route53:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ACMApproverFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import json,datetime,boto3,traceback,time\nfrom botocore.vendored import requests\nfrom datetime import date, datetime\ndef json_serial(obj):\n    if isinstance(obj, (datetime, date)):\n        return obj.isoformat()\n    raise TypeError (\"Type %s not serializable\" % type(obj))\ndef cfn_response(url, body):\n    headers = {'content-type' : '','content-length' : str(len(body))}\n    response = requests.put(url,data=body,headers=headers)\ndef acm_certificate(event, context):\n    if event['RequestType'] in ['Create','Update']:\n        cfn_response(event['ResponseURL'], _create_acm_certificate(event))\n    else:\n        cfn_response(event['ResponseURL'], _delete_acm_certificate(event))\ndef _create_acm_certificate(event):\n    acm = boto3.client('acm')\n    r53 = boto3.client('route53')\n    ret = {}\n    ret['StackId'] = event['StackId']\n    ret['RequestId'] = event['RequestId']\n    ret['LogicalResourceId'] = event['LogicalResourceId']\n    rp = event['ResourceProperties']\n    try:\n        dn = rp['DomainName']\n        clist = acm.list_certificates(CertificateStatuses=['PENDING_VALIDATION','ISSUED'])['CertificateSummaryList']\n        cert_arn = None\n        exists = ([c for c in clist if c['DomainName']== dn] or [None])[0]\n        if exists != None:\n            print(\"Cert exists\")\n            cert_arn = exists['CertificateArn']\n        else:\n            print(\"Cert does not exist. Creating one.\")\n            rcr = acm.request_certificate(\n                DomainName=dn,\n                ValidationMethod='DNS',\n                IdempotencyToken=event['LogicalResourceId']\n            )\n            cert_arn = rcr['CertificateArn']\n            time.sleep(10)\n            dcr = acm.describe_certificate(\n                CertificateArn=cert_arn\n            )\n            r53_c = []\n            rr = dcr['Certificate']['DomainValidationOptions'][0]['ResourceRecord']\n            bd = {'Comment':'Auth','Changes':[{'Action':'UPSERT','ResourceRecordSet':{'Name':rr['Name'],'Type':rr['Type'],'TTL': 3600,'ResourceRecords':[{'Value':rr['Value']}]}}]}\n            r53.change_resource_record_sets(\n                HostedZoneId=rp['HostedZoneId'],\n                ChangeBatch=bd\n            )\n            allGood = False\n            while not allGood:\n                time.sleep(30)\n                print(\"Checking if domain is validated.\")\n                cc = acm.describe_certificate(\n                    CertificateArn=cert_arn\n                )\n                st = cc['Certificate']['Status']\n                print(\"Curr Status %s\" % st)\n                if st == 'ISSUED':\n                    allGood = True\n            bd['Changes'][0]['Action'] = \"DELETE\"\n            r53.change_resource_record_sets(\n                HostedZoneId=rp['HostedZoneId'],\n                ChangeBatch=bd\n            )\n\n        ret['PhysicalResourceId'] = cert_arn\n        ret['Data'] = {}\n        ret['Data']['CertificateArn'] = cert_arn\n        ret['Status'] = 'SUCCESS'\n    except:\n        traceback.print_exc()\n        ret['Status'] = 'FAILED'\n        ret['Reason'] = 'Good question'\n    finally:\n        cfn_response(event['ResponseURL'], json.dumps(ret))\n        return json.dumps(ret)\n\ndef _delete_acm_certificate(event):\n    acm = boto3.client('acm')\n    ret = {}\n    ret['StackId'] = event['StackId']\n    ret['RequestId'] = event['RequestId']\n    ret['LogicalResourceId'] = event['LogicalResourceId']\n    ret['PhysicalResourceId'] = event['PhysicalResourceId']\n    try:\n        response = acm.delete_certificate(\n            CertificateArn=event['PhysicalResourceId']\n        )\n        print(\"got response %s\" % json.dumps(response, default=json_serial))\n        ret['Status'] = 'SUCCESS'\n    except:\n        traceback.print_exc()\n        ret['Status'] = 'SUCCESS'\n        ret['Reason'] = 'Good question'\n    finally:\n        cfn_response(event['ResponseURL'], json.dumps(ret))\n        return json.dumps(ret)\n"
        },
        "Description": "Cloudformation Custom Resource for ACM certs using Route53 approval",
        "Handler": "index.acm_certificate",
        "MemorySize": 256,
        "Runtime": "python2.7",
        "Timeout": 600,
        "Role": {
          "Fn::GetAtt": "ACMApproverRole.Arn"
        }
      }
    },
    "AutoCertificate": {
      "Type": "Custom::ACMCertificate",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": "ACMApproverFunction.Arn"
        },
        "DomainName": { "Ref": "DomainName" },
        "HostedZoneId": { "Ref": "HostedZoneId" }
      }
    }
  },
  "Outputs": {
    "CertificateArn": {
      "Description": "The arn of the created certificate",
      "Value": { "Ref": "AutoCertificate" }
    }
  }
}
